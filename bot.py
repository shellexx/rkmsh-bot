
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackQueryHandler, ConversationHandler, CallbackContext
)
from datetime import datetime
import pytz
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

TOKEN = os.getenv("TOKEN")
SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")
RECEIVER_EMAIL = os.getenv("RECEIVER_EMAIL")

MAIL_SERVER = "smtp.mail.ru"
MAIL_PORT = 587
LOGO_URL = "https://pkm-school.ru/wp-content/uploads/2025/04/logoschool-copy112.png"

moscow_tz = pytz.timezone("Europe/Moscow")

NAME, DOB, CONTACT, CLASS, MESSAGE = range(5)

def show_main_menu(chat_id, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data='apply')],
        [InlineKeyboardButton("üì¢ Telegram-–∫–∞–Ω–∞–ª", url='https://t.me/RCISchool')],
        [InlineKeyboardButton("üìò –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url='https://vk.com/rcischool')],
        [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url='https://pkm-school.ru')],
        [InlineKeyboardButton("üì± WhatsApp", url='https://wa.me/79267035536')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_photo(
        chat_id=chat_id,
        photo=LOGO_URL,
        caption="""
ü§ñ *–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–æ—Ç –†–ö–ú–®!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üì©
‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è üìö
‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è

üì• –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
"""
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

def start(update: Update, context: CallbackContext):
    show_main_menu(update.message.chat_id, context)

def handle_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ *–§–ò–û* —Ä–µ–±—ë–Ω–∫–∞:", parse_mode="Markdown")
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text("üóì –£–∫–∞–∂–∏—Ç–µ *–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è* (–î–î.–ú–ú.–ì–ì–ì–ì):", parse_mode="Markdown")
    return DOB

def dob(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['dob'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        update.message.reply_text("üìû –ù–∞–ø–∏—à–∏—Ç–µ *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:", parse_mode="Markdown")
        return CONTACT
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return DOB

def contact(update: Update, context: CallbackContext) -> int:
    phone = update.message.text
    if not re.match(r"^\+7\d{10}$", phone):
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return CONTACT
    context.user_data['contact'] = phone
    update.message.reply_text("üè´ –í –∫–∞–∫–æ–π *–∫–ª–∞—Å—Å* —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å?", parse_mode="Markdown")
    return CLASS

def school_class(update: Update, context: CallbackContext) -> int:
    context.user_data['class'] = update.message.text
    update.message.reply_text("‚úçÔ∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã*?", parse_mode="Markdown")
    return MESSAGE

def message(update: Update, context: CallbackContext) -> int:
    context.user_data['message'] = update.message.text
    data = context.user_data

    email_body = f"""
    üéì –ó–ê–Ø–í–ö–ê –í –†–ö–ú–®

    üë§ –§–ò–û: {data['name']}
    üìÜ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['dob'].strftime('%d.%m.%Y')}
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['contact']}
    üè´ –ö–ª–∞—Å—Å: {data['class']}
    üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {data['message']}
    """

    send_email(email_body)
    update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    show_main_menu(update.message.chat_id, context)
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    show_main_menu(update.message.chat_id, context)
    return ConversationHandler.END

def send_email(content: str):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = f"–†–ö–ú–® | –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}"
        msg.attach(MIMEText(content, 'plain'))
        server = smtplib.SMTP(MAIL_SERVER, MAIL_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
        server.quit()
        print("üìß –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_callback, pattern="^apply$")],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
            DOB: [MessageHandler(Filters.text & ~Filters.command, dob)],
            CONTACT: [MessageHandler(Filters.text & ~Filters.command, contact)],
            CLASS: [MessageHandler(Filters.text & ~Filters.command, school_class)],
            MESSAGE: [MessageHandler(Filters.text & ~Filters.command, message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
